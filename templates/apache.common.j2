
  SSLEngine On
  #SSLAppName QIBM_HTTP_SERVER_APPNAME
  #SSLClientAuth None
  SetEnv HTTPS_PORT 443
  SSLHonorCipherOrder On
  SSLCompression Off
  SSLProtocol all -SSLv2 -SSLv3 -TLSv1 -TLSv1.1
  SSLCipherSuite HIGH:!aNULL:!MD5
  #SSLCipherSuite ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
  Header always set Strict-Transport-Security "max-age=15768000; includeSubDomains"
  Header always set Referrer-Policy "strict-origin"
  Header always set X-XSS-Protection "1; mode=block"
  Header always set X-Content-Type-Options "nosniff"
  Header always set X-Frame-Options "sameorigin"

  ProxyPreserveHost on

  # Testing only
  <Location "/cgi-bin">
    #<If >
    AuthType shibboleth
    ShibRequestSetting requireSession 1
    ShibUseEnvironment On
    #ShibUseHeaders On
    <RequireAll>
      Require ip {{ jupyter_aalto_ip_range }}
      Require valid-user
    </RequireAll>
  </Location>
  ScriptAlias "/cgi-bin/" "/var/www/cgi-bin/"
  ProxyPass /cgi-bin !

  # Failed Shibboleth integration:
  #<Location "/dev/hub/login">
  #  AuthType shibboleth
  #  ShibRequestSetting requireSession 1
  #  Require valid-user
  #  #ShibUseHeaders On
  #</Location>

  # Custom provider using the "id" command to check against system triton-users group.
  LuaAuthzProvider usergrouplua /etc/httpd/authz_usergroup.lua authz_check_usergroup

  # DBD provider
  #DBDriver sqlite3
  #DBDParams "file:/etc/jupyterhub/jupyterhub.sqlite?mode=ro"
  #AuthzDBDQuery "select 'allowed-group' from users where name=substr(%s, 1, instr(%s, '@'))"

  #ShibDisable On
  {% if shib_enabled %}
  ErrorDocument 401 "A pre-existing Triton account is required to use this service.  See http://scicomp.aalto.fi/triton/apps/jupyter.html"
  {% endif %}

{% if False %}
  <Location /Shibboleth.sso>
    SetHandler shib
  </Location>
  # Don't reverse proxy this location
  ProxyPass /Shibboleth.sso !

  # Require EITHER internal IP OR shibboleth
  <Location "/">
    <If "-R '130.233.97.225' || ! -R '{{ jupyter_aalto_ip_range }}'" >
      AuthType shibboleth
      ShibUseEnvironment On
      ShibRequestSetting requireSession true
      <RequireAll>
        Require valid-user
        Require expr %{REMOTE_USER} =~ /@{{jupyter_trusted_shib_domain}}$/
        Require usergrouplua
      </RequireAll>
    </If>
  </Location>
  <Location "/user">
    <If "-R '130.233.97.225' || ! -R '{{ jupyter_aalto_ip_range }}'" >
      ShibRequestSetting requireSession true
      <RequireAll>
        Require valid-user
        Require expr %{REMOTE_USER} =~ /@{{jupyter_trusted_shib_domain}}$/
      </RequireAll>
    </If>
  </Location>
{% endif %}

  # Dev server - requires separate process running
  <Location /dev>
    Require ip {{ jupyter_aalto_ip_range }}
  </Location>
  ProxyPass        /dev/ "http://127.0.0.1:8200/dev/"
  ProxyPassReverse /dev/ "http://127.0.0.1:8200/dev/"
  # Use RewriteEngine to handle websocket connection upgrades
  RewriteEngine On
  RewriteCond %{HTTP:Connection} Upgrade [NC]
  RewriteCond %{HTTP:Upgrade} websocket [NC]
  RewriteRule /dev/(.*) ws://127.0.0.1:8200/dev/$1 [P,L]

  # Live server
  ProxyPass        /     "http://127.0.0.1:8000/"
  ProxyPassReverse /     "http://127.0.0.1:8000/"
  RewriteEngine On
  RewriteCond %{HTTP:Connection} Upgrade [NC]
  RewriteCond %{HTTP:Upgrade} websocket [NC]
  RewriteRule /(.*) ws://127.0.0.1:8000/$1 [P,L]

  {# this file MUST end in at leasttwo blank lines #}

